type: edu
files:
  - name: src/phonebook/Main.kt
    visible: true
    text: |-
      package phonebook
      
      import phonebook.Container.Companion.catch
      import phonebook.search.*
      import phonebook.sort.BubbleSort
      import phonebook.sort.QuickSort
      import phonebook.sort.Sort
      import phonebook.sort.SortTimeoutException
      import java.io.File
      import java.time.Duration
      
      private fun timeTaken(total: Duration): String {
          return String.format("%d min. %d sec. %d ms.", total.toMinutes(), total.seconds % 60, total.toMillis() % 1000)
      }
      
      fun main() {
          val test = AlgorithmTester()
          val repository = FileRepository()
      
          val linearSearch = LinearSearch()
          val jumpSearch = JumpSearch()
          val binarySearch = BinarySearch()
      
          test(linearSearch, repository.readPhoneBooks())
              .also { println() }
              .run { multipliedBy(10) }
              .let {
                  test(
                      search = jumpSearch,
                      phoneBook = repository.readPhoneBooks(),
                      sorter = BubbleSort(it),
                      alternativeSearch = linearSearch
                  )
              }
              .also { println() }
              .let {
                  test(
                      search = binarySearch,
                      phoneBook = repository.readPhoneBooks(),
                      sorter = QuickSort(),
                  )
              }
      }
      
      private class AlgorithmTester {
          operator fun invoke(
              search: Search,
              phoneBook: PhoneBook,
              sorter: Sort? = null,
              alternativeSearch: Search? = null
          ): Duration {
              val timer = Timer.startCounting()
              println("Start searching (${search.name()})...")
      
              sorter?.let { catch { it.sort(phoneBook) } }
                  .let {
                      when (it) {
                          is Container.Success -> {
                              val sortTime = timer.elapsed()
                              val searchResult = search(it.value)
                              val searchTime = timer.elapsed()
                              val total = sortTime + searchTime
      
                              displaySearchSummary(searchResult, total)
                              println("Sorting time: ${timeTaken(sortTime)}")
                              println("Searching time: ${timeTaken(searchTime)}")
      
                              return total
                          }
      
                          is Container.Failure -> {
                              val sortTime = timer.elapsed()
      
                              val searchTimer = Timer.startCounting()
                              val searchResult = alternativeSearch!!(phoneBook)
                              val searchTime = searchTimer.elapsed()
      
                              val total = sortTime + searchTime
      
                              displaySearchSummary(searchResult, total)
                              println("Sorting time: ${timeTaken(sortTime)} - STOPPED, moved to linear search")
                              println("Searching time: ${timeTaken(searchTime)}")
                              return total
                          }
      
                          // No sorter - only search.
                          null -> {
                              val searchResult = search(phoneBook)
                              val searchTime = timer.elapsed()
      
                              displaySearchSummary(searchResult, searchTime)
      
                              return searchTime
                          }
                      }
                  }
          }
      
          private fun displaySearchSummary(searchResult: SearchResult, searchTime: Duration) {
              println(
                  "Found ${searchResult.first} / ${searchResult.second} entries. Time taken: ${
                      timeTaken(
                          searchTime
                      )
                  }"
              )
          }
      
      
      }
      
      private enum class FileSource(val path: String) {
          FIND("D:\\hyperskills\\find.txt"),
          DIRECTORY("D:\\hyperskills\\directory.txt"),
      //    FIND("D:\\hyperskills\\small_find.txt"),
      //    DIRECTORY("D:\\hyperskills\\small_directory.txt")
      }
      
      private class FileRepository {
      
          fun readPhoneBooks(): PhoneBook = readAll(FileSource.DIRECTORY)
              .map { Contact(it) }
              .let { PhoneBook(it, readToFind()) }
      
          private fun readToFind(): List<String> = readAll(FileSource.FIND)
      
          private fun readAll(file: FileSource): List<String> = File(file.path).readLines()
      
      }
      
      sealed class Container<out L, out R> {
      
          data class Failure<L>(val value: L) : Container<L, Nothing>()
      
          data class Success<R>(val value: R) : Container<Nothing, R>()
      
          companion object {
              inline fun <R> catch(block: () -> R): Container<Throwable, R> {
                  return try {
                      Success(block())
                  } catch (e: SortTimeoutException) {
                      Failure(e)
                  } catch (e: Error) {
                      throw e
                  }
              }
          }
      }
    learner_created: false
  - name: src/phonebook/search/LinearSearch.kt
    visible: true
    text: |-
      package phonebook.search
      
      import phonebook.PhoneBook
      
      class LinearSearch : Search {
      
          override operator fun invoke(phoneBook: PhoneBook): SearchResult {
              var found = 0
              val targets = phoneBook.targets
      
              for (target in targets) {
      
                  for (directory in phoneBook) {
      
                      if (target in directory) {
                          ++found
                          break
                      }
                  }
              }
      
              return found to targets.size
          }
      
          override fun name(): String = "linear search"
      
      }
    learner_created: false
  - name: src/phonebook/operation/BubbleSort.kt
    visible: true
    text: |-
      package phonebook.sort
      
      import phonebook.Contact
      import phonebook.PhoneBook
      import phonebook.Timer
      import java.time.Duration
      
      class BubbleSort(private val timeout: Duration) : Sort {
      
          override fun sort(phoneBook: PhoneBook): PhoneBook {
              val timer = Timer.startCounting()
              val sortedRecords = phoneBook.toMutableList()
      
              for (i in 0 until sortedRecords.size) {
      
                  for (j in 0 until sortedRecords.size - i - 1) {
                      if (sortedRecords[j] > sortedRecords[j + 1]) {
                          val temp = sortedRecords[j]
                          sortedRecords[j] = sortedRecords[j + 1]
                          sortedRecords[j + 1] = temp
                      }
                  }
      
                  if (tooLongExecution(timer)) {
                      throw SortTimeoutException(timer.elapsed(), timeout)
                  }
      
              }
      
              return PhoneBook(
                  records = sortedRecords,
                  targets = phoneBook.targets,
              )
          }
      
          private fun tooLongExecution(timer: Timer): Boolean {
              return timer.elapsed() > timeout
          }
      
      }
    learner_created: false
  - name: src/phonebook/search/Search.kt
    visible: true
    text: |-
      package phonebook.search
      
      import phonebook.PhoneBook
      
      
      typealias SearchResult = Pair<Int, Int>
      
      interface Search {
          /**
           * @return how many items found
           */
          operator fun invoke(phoneBook: PhoneBook): SearchResult
      
          fun name(): String
      
      }
    learner_created: false
  - name: src/phonebook/Contact.kt
    visible: true
    text: |-
      package phonebook
      
      data class Contact(
          val name: String,
          val phone: String
      ) {
      
          operator fun contains(target: String): Boolean = name == target
      
          operator fun compareTo(pivot: Contact): Int = name.compareTo(pivot.name)
      
          constructor(record: String) : this(
              phone = record.substringBefore(" "),
              name = record.substringAfter(" ")
          )
      }
    learner_created: false
  - name: src/phonebook/PhoneBook.kt
    visible: true
    text: |-
      package phonebook
      
      data class PhoneBook(
          private val records: List<Contact>,
          val targets: List<String>,
      ) : List<Contact> by records
    learner_created: false
  - name: src/phonebook/operation/Operation.kt
    visible: true
    text: |-
      package phonebook.sort
      
      import phonebook.PhoneBook
      import java.time.Duration
      
      fun interface Sort {
          fun sort(phoneBook: PhoneBook): PhoneBook
      }
      
      data class SortTimeoutException(val elapsed: Duration,val timeout: Duration) :
          RuntimeException("Timeout exception after ${elapsed.toSeconds()} [s]")
    learner_created: false
  - name: src/phonebook/search/JumpSearch.kt
    visible: true
    text: |-
      package phonebook.search
      
      import phonebook.Contact
      import phonebook.PhoneBook
      import kotlin.math.floor
      import kotlin.math.min
      import kotlin.math.sqrt
      
      class JumpSearch : Search {
      
          override operator fun invoke(phoneBook: PhoneBook): SearchResult {
              var found = 0
              val targets = phoneBook.targets
      
              for (target in targets) {
                  var curr = 0
                  var prev = 0
                  val last = phoneBook.size
                  val step = floor(sqrt(last.toDouble())).toInt()
      
                  while (target > getCurrentRecord(phoneBook, curr)) {
                      if (curr == last) {
                          break
                      }
                      prev = curr
                      curr = min(curr + step, last)
                  }
      
      
                  while (target < getCurrentRecord(phoneBook, curr)) {
                      curr -= 1
      
                      if (curr <= prev) {
                          break
                      }
                  }
      
                  if (target contentEquals getCurrentRecord(phoneBook, curr)) {
                      found++
                  }
      
              }
              return found to targets.size
          }
      
          override fun name(): String = "bubble sort + jump search"
      
          private fun getCurrentRecord(sortedRecords: List<Contact>, index: Int) =
              sortedRecords[index].name
      }
    learner_created: false
  - name: src/phonebook/Timer.kt
    visible: true
    text: |-
      package phonebook
      
      import java.time.Duration
      
      data class Timer(private val startTime: Long = 0L) {
      
          fun elapsed(): Duration = Duration.ofMillis(System.currentTimeMillis() - startTime)
      
          companion object {
              fun startCounting(): Timer = Timer(System.currentTimeMillis())
          }
      }
    learner_created: false
  - name: src/phonebook/operation/QuickSort.kt
    visible: true
    text: |-
      package phonebook.sort
      
      import phonebook.Contact
      import phonebook.PhoneBook
      
      class QuickSort : Sort {
          override fun sort(phoneBook: PhoneBook): PhoneBook {
              val sortedRecords = phoneBook.toMutableList()
      
              quickSort(sortedRecords, 0, sortedRecords.size - 1)
      
              return PhoneBook(
                  records = sortedRecords,
                  targets = phoneBook.targets
              )
          }
      
          private fun quickSort(contacts: MutableList<Contact>, left: Int, right: Int) {
              if (left < right) {
                  // partition the array around the pivot
                  val pivot = partition(contacts, left, right)
      
                  // recursively sort the lower side
                  quickSort(contacts, left, pivot - 1)
                  // recursively sort the upper side
                  quickSort(contacts, pivot + 1, right)
              }
      
          }
      
          private fun partition(contacts: MutableList<Contact>, left: Int, right: Int): Int {
              val pivot = contacts[right]
              var i = left - 1
      
              //for (j in 1 until right - 1) {
              for(j in left until right){
      
                  if (contacts[j] < pivot) {
                      i += 1
                      swap(contacts, i, j)
                  }
              }
      
              // Put the pivot to the right of the lower side.
              swap(contacts, i + 1, right)
              // New pivot
              return i + 1
          }
      
          private fun swap(contacts: MutableList<Contact>, index1: Int, index2: Int) {
              val temp = contacts[index1]
              contacts[index1] = contacts[index2]
              contacts[index2] = temp
          }
      }
    learner_created: false
  - name: src/phonebook/search/BinarySearch.kt
    visible: true
    text: |-
      package phonebook.search
      
      import phonebook.PhoneBook
      
      class BinarySearch : Search {
          override fun invoke(phoneBook: PhoneBook): SearchResult {
              var found = 0
      
              for (target in phoneBook.targets) {
                  var left = 0
                  var right = phoneBook.size - 1
      
                  while (left <= right) {
                      val middle = (left + right) / 2
      
                      if (target == phoneBook[middle].name) {
                          ++found
                          break
                      }
      
                      if (target < phoneBook[middle].name) {
                          right = middle - 1
                      } else {
                          left = middle + 1
                      }
      
      
                  }
      
              }
      
              return found to phoneBook.targets.size
          }
      
          override fun name(): String = "quick sort + binary search"
      }
    learner_created: false
  - name: test/PhoneBookTest.java
    visible: false
    text: |
      import org.hyperskill.hstest.stage.StageTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testcase.TestCase;
      
      import java.util.ArrayList;
      import java.util.Arrays;
      import java.util.List;
      import java.util.regex.Matcher;
      import java.util.regex.Pattern;
      
      public class PhoneBookTest extends StageTest {
      
          private long timeOnTestStart;
      
          @Override
          public List<TestCase> generate() {
              timeOnTestStart = System.currentTimeMillis();
              return Arrays.asList(
                      new TestCase().setTimeLimit(30 * 60 * 1000)
              );
          }
      
      
          private CheckResult checkPhrases(String reply, String... phrases) {
              reply = reply.toLowerCase();
              for (String phrase : phrases) {
                  if (!reply.contains(phrase.toLowerCase())) {
                      return CheckResult.wrong("Not found the part `" + phrase + "` in your output.");
                  }
              }
              return CheckResult.correct();
          }
      
          private List<String> findAll(String reply, String regex) {
              Matcher matcher = Pattern.compile(regex).matcher(reply);
              List<String> groups = new ArrayList<>();
              while (matcher.find()) {
                  groups.add(matcher.group());
              }
              return groups;
          }
      
          private String timeRegex = "(\\d+)\\s*min.*?(\\d+)\\s*sec.*?(\\d+)\\s*ms";
          private Pattern timeRegexPattern = Pattern.compile(timeRegex);
      
          private long parseTimestamp(String timestamp) {
              Matcher matcher = timeRegexPattern.matcher(timestamp);
              if (!matcher.matches() || matcher.groupCount() < 3) {
                  throw new IllegalStateException("???Not matches the line " + timestamp);
              }
              int min = Integer.parseInt(matcher.group(1));
              int sec = Integer.parseInt(matcher.group(2));
              int ms = Integer.parseInt(matcher.group(3));
              return ms + sec * 1000 + min * 1000 * 60;
          }
      
      
          @Override
          public CheckResult check(String reply, Object clue) {
              long realTime = System.currentTimeMillis() - timeOnTestStart;
              reply = reply.toLowerCase();
              CheckResult res = checkPhrases(reply,
                      "found",
                      "min.",
                      "sec.",
                      "ms.",
                      "sorting time",
                      "searching time",
                      "linear search",
                      "bubble sort",
                      "jump search",
                      "quick sort",
                      "binary search",
                      "hash table",
                      "creating time"
              );
              if (!res.isCorrect()) {
                  return res;
              }
      
              List<String> stat1 = findAll(reply, "500 / 500");
              List<String> stat2 = findAll(reply, "500/500");
      
              if (stat1.size() + stat2.size() < 4) {
                  return CheckResult.wrong("Your output should contain 4 times the phrase `500 / 500`");
              }
      
              List<String> timestamps = findAll(reply, timeRegex);
              if (timestamps.size() != 10) {
                  return CheckResult.wrong("Your output should contain 10 timer outputs, but found "
                          + timestamps.size());
              }
              // should not fail..
              long t1 = parseTimestamp(timestamps.get(0));
              long t2 = parseTimestamp(timestamps.get(1));
              long t3 = parseTimestamp(timestamps.get(2));
              long t4 = parseTimestamp(timestamps.get(3));
              // qsort
              long t5 = parseTimestamp(timestamps.get(4));
              long t6 = parseTimestamp(timestamps.get(5));
              long t7 = parseTimestamp(timestamps.get(6));
              // hash table
              long t8 = parseTimestamp(timestamps.get(7));
              long t9 = parseTimestamp(timestamps.get(8));
              long t10 = parseTimestamp(timestamps.get(9));
      
              if (Math.abs(t3 + t4 - t2) > 100) {
                  return CheckResult.wrong("Your third and fourth timer outputs in total (bubble sorting and searching) " +
                          "should be equal to the second (total search time).");
              }
              if (Math.abs(t6 + t7 - t5) > 100) {
                  return CheckResult.wrong("Your 6-th and 7-th timer outputs in total (qsort and searching) " +
                          "should be equal to the 5-th (total search time).");
              }
              if (Math.abs(t9 + t10 - t8) > 100) {
                  return CheckResult.wrong("Your 9-th and 10-th timer outputs in total (creating hashtable and searching) " +
                          "should be equal to the 8-th (total search time).");
              }
      
              long estimatedTime = t1 + t2 + t5 + t8;
              if (realTime < 1000) {
                  return CheckResult.wrong("Your program completes too fast. Faster than a second!");
              }
      
              if (Math.abs(estimatedTime - realTime) > estimatedTime * 0.3) {
                  return CheckResult.wrong("Your estimated time is not similar to real time the program works. " +
                          "Real time: " + realTime + "ms, estimated time: " + estimatedTime + "ms");
              }
      
              if (t8 >= t5) {
                  return CheckResult.wrong("Your hashtable works slower, than quick sort + binary search.");
              }
              return CheckResult.correct();
          }
      }
    learner_created: false
  - name: src/phonebook/operation/LoadToHashSet.kt
    visible: true
    learner_created: true
  - name: src/phonebook/search/HashSearch.kt
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/projects/86/stages/479/implement#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Sat, 14 Sep 2024 10:47:51 UTC"
record: -1
